111.Minimun Depth of Binary Tree
两种解法，第一种recursive的话，只有在叶子节点才能判断所以
1. public int minDepth(TreeNode root) {  
2.     if(root == null)  
3.         return 0;  
4.     if(root.left == null)  
5.         return minDepth(root.right)+1;  
6.     if(root.right == null)  
7.         return minDepth(root.left)+1;  
8.     return Math.min(minDepth(root.left),minDepth(root.right))+1;  
9. } 
10. 
这样比较对，先判断是不是空的，在判断有没有右节点，然后有没有左节点，最后取最小值+1，加root的1
也可以用BFS
public class Solution {
    public int minDepth(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if(root!=null) queue.offer(root);
        int depth = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            depth++;
            for(int i = 0; i < size; i++){
                TreeNode curr = queue.poll();
                if(curr.left == null && curr.right == null){
                    return depth;
                }
                if(curr.left != null) queue.offer(curr.left);
                if(curr.right != null) queue.offer(curr.right);
            }
        }
        return depth;
    }
}